<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Himosn&#39;s Blog</title>
  
  <subtitle>for the love ones</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-13T16:49:43.913Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Himson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Finite Universe</title>
    <link href="http://yoursite.com/2018/12/13/Universe/"/>
    <id>http://yoursite.com/2018/12/13/Universe/</id>
    <published>2018-12-13T16:45:16.000Z</published>
    <updated>2018-12-13T16:49:43.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Master-Automation"><a href="#Master-Automation" class="headerlink" title="Master Automation"></a>Master Automation</h2><ol><li><p>Let <code>L</code>be a ﬁxed-length language. The language recognized from the<br>state <code>L</code>of the master automaton is <code>L</code>.<br>proof can be done by using induction. When n = 0, we check the state directly to see if it is accepted, which is whether empty language or language with empty word. The Induction process is done by checking the successor of the state.</p></li><li><p>The branch <code>$A_L$</code>is  the minimal DFA.<br>from the proposition above distinct state in Master recognize distinct state. A DFA is minimal if and only if the distinct states recognizes distinct languages</p></li></ol><h2 id="Data-Structure-Implementation"><a href="#Data-Structure-Implementation" class="headerlink" title="Data Structure Implementation"></a>Data Structure Implementation</h2><p>First define the Automata for finite set of fixed-length language formally. Then assign node for different states/languages. Conventionally assign 0 to empty language and 1 to the language with only the empty word.  for each node there are the successor for different letter in the alphbets</p><p>The object is to implement different operations. First introduce the make(s)<br>method. It reture the state T has the state s as the successor. If state T is not exist in current stack, we make a new node &lt;q,s&gt; and push it into the stack.</p><h3 id="Set-Operation"><a href="#Set-Operation" class="headerlink" title="Set Operation"></a>Set Operation</h3><ol><li>Membership<br>Linear Time, O(n), the length of the language.</li><li>Intersection<br>It is done recursively. Look into the successor, if they are not empty then the new suceessor is their union. Keep doing this and keep track of all the states have processed, do binary search every time process the states will safe time.</li><li>fixed length complement<br>when the length is not 0, the complement of the residual of letter a , is the residual of the letter a  of the complement.<br>Proof: w is in residual casue of a in complement of L as long as aw is not in L, then w is not in residual of a in L meaning that it is also complement of residual a.<br>also can be done recursivly, start the complement from the button, keep track of the length.</li><li>fixed length emptiness<br>Such can be checked in constant time</li></ol><h3 id="Determinization-and-Minimization"><a href="#Determinization-and-Minimization" class="headerlink" title="Determinization and Minimization"></a>Determinization and Minimization</h3><h3 id="Relation"><a href="#Relation" class="headerlink" title="Relation"></a>Relation</h3><h2 id="Binary-Desicion-Diagram"><a href="#Binary-Desicion-Diagram" class="headerlink" title="Binary Desicion Diagram"></a>Binary Desicion Diagram</h2><p>Popular Data structure can be seen as finite automate regular language over {0,1}<br>Coversion between BDD and minDFA is applicable  </p><h3 id="Kernels"><a href="#Kernels" class="headerlink" title="Kernels"></a>Kernels</h3><p><em>Definiation</em>. the set of the residual for different letters are not the same is call a kernel.  Or L is 0 or empty word   </p><p>We then can construct the master     desicion diagram</p><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Master-Automation&quot;&gt;&lt;a href=&quot;#Master-Automation&quot; class=&quot;headerlink&quot; title=&quot;Master Automation&quot;&gt;&lt;/a&gt;Master Automation&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;L
      
    
    </summary>
    
    
      <category term="automata" scheme="http://yoursite.com/tags/automata/"/>
    
  </entry>
  
  <entry>
    <title>Add laser to the robot in Gazebo and Some Coding with Matlab</title>
    <link href="http://yoursite.com/2018/12/12/Difference%20between%20imfilter%20filter2%20conv2/"/>
    <id>http://yoursite.com/2018/12/12/Difference between imfilter filter2 conv2/</id>
    <published>2018-12-12T15:20:21.000Z</published>
    <updated>2018-12-12T22:33:00.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Laser"><a href="#Laser" class="headerlink" title="Laser"></a>Laser</h2><p>First we start with a bug report. I have been troubled by it for 3 weeks. I have to add a laser into the first link in the snake robot. Gazebo plugin already provide “libRayplugin.so” which I found from Hokuyo plugin <a href="http://sdformat.org/spec?ver=1.6&amp;elem=model" target="_blank" rel="noopener">sdf file</a>. But I try for many times but it won’t work.<br><strong>Here Start the Bug statement</strong><br>I have already edit the world manualy in Gazebo world editor. Back then I try to add stair model in gazebo. When I save the world, Gazebo save the flie include the snake model into world.sdf file. Thus when I start gazebo, the model statement in world.sdf overlap the statement in model.sdf and ignore my edit.<br><em>sad story</em></p><h2 id="Matlab-Coding"><a href="#Matlab-Coding" class="headerlink" title="Matlab Coding"></a>Matlab Coding</h2><h3 id="Difference-between-filter2-conv2-imfilter"><a href="#Difference-between-filter2-conv2-imfilter" class="headerlink" title="Difference between filter2, conv2, imfilter"></a>Difference between filter2, conv2, imfilter</h3><p>filter2 and conv2 do almost the same thing: the results are related like this:<br> conv2(image, mask) is the same as filter2(rot90(mask,2), image) </p><p>The relationship can also be stated by saying that filter2 implements correlation, whilst conv2 implements convolution.  </p><p>In addition, filter2 implements an optimisation for the case of separable masks. This shouldn’t affect significantly the numerical values of the results, just the speed.  </p><p>The fex contribution convolve2 implements a stronger set of optimisations. There’s a comparison here.<br>imfilter does the same as conv2/filter2/convolve2 but with lots of extra features, such as handling different data types, handling colour images, switching the algorithm between correlation and convolution, and offering more options than conv2 and filter2 for what happens at the image boundaries.<br>Bottom line: if you are happy to work with data of type double (MATLAB’s default) use conv2. If it’s slow try convolve2 to see if it will speed it up. If you need the extra features, use imfilter.</p><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>fspecial: create special filter<br>imfilter: becareful with the boundary option</p><h2 id="Proof-of-Green’s-Therom"><a href="#Proof-of-Green’s-Therom" class="headerlink" title="Proof of Green’s Therom"></a>Proof of Green’s Therom</h2><ol><li>Prove it is true for the situation in a cube</li><li>Prove it inductivly for disjoint union from 1:n</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Laser&quot;&gt;&lt;a href=&quot;#Laser&quot; class=&quot;headerlink&quot; title=&quot;Laser&quot;&gt;&lt;/a&gt;Laser&lt;/h2&gt;&lt;p&gt;First we start with a bug report. I have been troubled by 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/25/hello-world/"/>
    <id>http://yoursite.com/2018/02/25/hello-world/</id>
    <published>2018-02-25T04:39:11.921Z</published>
    <updated>2018-02-25T04:39:11.921Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
